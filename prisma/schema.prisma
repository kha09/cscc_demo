// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Prisma Client uses this (pooler)
  directUrl = env("DIRECT_URL") // Prisma Migrate uses this (direct connection)
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  department String?
  nameAr    String? // Added Arabic Name
  mobile    String? // Added Mobile Number
  phone     String? // Added Phone Number
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdAssessments Assessment[] @relation("CreatedByAdmin") // Relation for assessments created by this admin
  managedAssessments Assessment[] @relation("ManagedBySecurityManager") // Relation for assessments managed by this security manager
  assignedTasks      Task[]       @relation("AssignedTasks") // Tasks assigned *by* this user (Security Manager)
  responsibleTasks   Task[]       @relation("ResponsibleTasks") // Tasks assigned *to* this user (Department Manager)
  controlAssignments ControlAssignment[] // Assignments given TO this user
}

model Assessment {
  id                      String   @id @default(uuid())
  companyNameAr           String
  companyNameEn           String
  logoPath                String? // Path or URL to the uploaded logo
  securityManagerId       String   // Foreign key for the selected Security Manager
  secondaryContactNameAr  String
  secondaryContactNameEn  String
  secondaryContactMobile  String
  secondaryContactPhone   String
  secondaryContactEmail   String
  assessmentName          String   // Made required again
  createdById             String   // Foreign key for the Admin who created it
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  securityManager User @relation("ManagedBySecurityManager", fields: [securityManagerId], references: [id])
  createdBy       User @relation("CreatedByAdmin", fields: [createdById], references: [id])

  @@index([securityManagerId])
  @@index([createdById])

  sensitiveSystems SensitiveSystemInfo[] // Relation to the sensitive system info
}

model SensitiveSystemInfo {
  id                         String  @id @default(uuid())
  systemName                 String
  systemCategory             String
  systemDescription          String
  assetRouterCount           Int
  assetSwitchCount           Int
  assetGatewayCount          Int
  assetFirewallCount         Int
  assetIPSIDSCount           Int
  assetAPTCount              Int
  assetDatabaseCount         Int
  assetStorageCount          Int
  assetMiddlewareCount       Int
  assetServerOSCount         Int
  assetApplicationCount      Int
  assetEncryptionDeviceCount Int
  assetPeripheralCount       Int
  assetSupportStaffCount     Int
  assetDocumentationCount    Int
  otherAssetType             String?
  otherAssetCount            Int?
  totalAssetCount            Int // Consider calculating this on the frontend/backend if needed

  assessmentId String
  assessment   Assessment @relation(fields: [assessmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks Task[] // Tasks related to this sensitive system

  @@index([assessmentId])
}

model Control {
  id            String  @id @default(uuid())
  mainComponent String
  subComponent  String?
  controlType   String // Could be an Enum if values are fixed: ControlType @default(BASIC)
  controlNumber String  @unique // Assuming control numbers are unique identifiers
  controlText   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // tasks Task[] // Removed old relation
  controlAssignments ControlAssignment[] // Assignments related to this control
}

// Optional Enum for ControlType if needed
// enum ControlType {
//   BASIC // أساسي
//   SUB   // فرعي
// }

model Department {
  id        String   @id @default(uuid())
  name      String   @unique // Department name must be unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // tasks Task[] // Remove this - Tasks are no longer directly linked to Department
}

enum Role {
  ADMIN
  SECURITY_MANAGER
  DEPARTMENT_MANAGER
  USER
}

// Enum for Task Status
enum TaskStatus {
  PENDING      // قيد الانتظار (Implicitly)
  IN_PROGRESS  // قيد التنفيذ
  COMPLETED    // مكتمل (User completed, awaiting review)
  APPROVED     // مقبول (Manager approved)
  REJECTED     // مرفوض (Manager rejected)
  OVERDUE      // متأخر
}

// Model for Task Assignments
model Task {
  id                  String     @id @default(uuid())
  deadline            DateTime
  status              TaskStatus @default(PENDING)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  sensitiveSystemId   String
  sensitiveSystem     SensitiveSystemInfo @relation(fields: [sensitiveSystemId], references: [id])

  // departmentId        String // No longer assigning directly to department ID
  // department          Department @relation(fields: [departmentId], references: [id]) // Remove relation

  assignedById        String // Security Manager who assigned the task
  assignedBy          User     @relation("AssignedTasks", fields: [assignedById], references: [id])

  assignedToId        String? // Department Manager responsible for the task (optional for now, but should be required by logic)
  assignedTo          User?    @relation("ResponsibleTasks", fields: [assignedToId], references: [id])

  // controls            Control[] // Removed direct many-to-many relation

  controlAssignments ControlAssignment[] // Relation to the new assignment model

  @@index([sensitiveSystemId])
  @@index([assignedById])
  @@index([assignedToId])
}

// New model for assigning individual controls within a task to users
model ControlAssignment {
  id            String     @id @default(uuid())
  taskId        String
  controlId     String
  assignedUserId String?    // The specific user this control is assigned to (can be null initially)
  status        TaskStatus @default(PENDING) // Status for this specific control assignment
  // Add fields for evidence if needed later, e.g.:
  // evidenceNotes    String?
  // evidenceFilePath String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  task          Task    @relation(fields: [taskId], references: [id])
  control       Control @relation(fields: [controlId], references: [id])
  assignedUser  User?   @relation(fields: [assignedUserId], references: [id]) // Relation to the assigned user

  notes                  String?    // الملاحظات - Re-adding this field
  correctiveActions      String?    // إجراءات التصحيح
  expectedComplianceDate DateTime?  // تاريخ الالتزام المتوقع
  complianceLevel        ComplianceLevel? // مستوى الالتزام

  // --- Manager Review Fields ---
  managerStatus          String?    // حالة مراجعة المدير (e.g., معتمد, طلب تنفيذ, طلب مراجعة)
  managerNote            String?    // ملاحظة المدير للمستخدم

  // @@index([taskId]) // Removed duplicate
  // @@index([controlId]) // Removed duplicate
  @@index([assignedUserId])

  files ControlFile[] // Relation to uploaded files for this assignment
}

// Model for storing uploaded file paths related to a control assignment
model ControlFile {
  id                 String   @id @default(uuid())
  filePath           String   // Path where the file is stored (e.g., /uploads/control-files/...)
  originalFilename   String   // Original name of the uploaded file
  controlAssignmentId String   // Foreign key to link to the specific control assignment
  createdAt          DateTime @default(now())

  controlAssignment ControlAssignment @relation(fields: [controlAssignmentId], references: [id], onDelete: Cascade) // Ensure files are deleted if assignment is deleted

  @@index([controlAssignmentId])
}


// Enum for Compliance Level
enum ComplianceLevel {
  NOT_IMPLEMENTED       // غير مطبق
  PARTIALLY_IMPLEMENTED // مطبق جزئيًا
  IMPLEMENTED           // مطبق كليًا
  NOT_APPLICABLE        // لا ينطبق
}
