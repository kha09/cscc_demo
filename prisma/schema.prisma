// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  department String?
  nameAr    String? // Added Arabic Name
  mobile    String? // Added Mobile Number
  phone     String? // Added Phone Number
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdAssessments Assessment[] @relation("CreatedByAdmin") // Relation for assessments created by this admin
  managedAssessments Assessment[] @relation("ManagedBySecurityManager") // Relation for assessments managed by this security manager
}

model Assessment {
  id                      String   @id @default(uuid())
  companyNameAr           String
  companyNameEn           String
  logoPath                String? // Path or URL to the uploaded logo
  securityManagerId       String   // Foreign key for the selected Security Manager
  secondaryContactNameAr  String
  secondaryContactNameEn  String
  secondaryContactMobile  String
  secondaryContactPhone   String
  secondaryContactEmail   String
  createdById             String   // Foreign key for the Admin who created it
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  securityManager User @relation("ManagedBySecurityManager", fields: [securityManagerId], references: [id])
  createdBy       User @relation("CreatedByAdmin", fields: [createdById], references: [id])

  @@index([securityManagerId])
  @@index([createdById])

  sensitiveSystems SensitiveSystemInfo[] // Relation to the sensitive system info
}

model SensitiveSystemInfo {
  id                         String  @id @default(uuid())
  systemName                 String
  systemCategory             String
  systemDescription          String
  assetRouterCount           Int
  assetSwitchCount           Int
  assetGatewayCount          Int
  assetFirewallCount         Int
  assetIPSIDSCount           Int
  assetAPTCount              Int
  assetDatabaseCount         Int
  assetStorageCount          Int
  assetMiddlewareCount       Int
  assetServerOSCount         Int
  assetApplicationCount      Int
  assetEncryptionDeviceCount Int
  assetPeripheralCount       Int
  assetSupportStaffCount     Int
  assetDocumentationCount    Int
  otherAssetType             String?
  otherAssetCount            Int?
  totalAssetCount            Int // Consider calculating this on the frontend/backend if needed

  assessmentId String
  assessment   Assessment @relation(fields: [assessmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([assessmentId])
}

model Control {
  id            String  @id @default(uuid())
  mainComponent String
  subComponent  String?
  controlType   String // Could be an Enum if values are fixed: ControlType @default(BASIC)
  controlNumber String  @unique // Assuming control numbers are unique identifiers
  controlText   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Optional Enum for ControlType if needed
// enum ControlType {
//   BASIC // أساسي
//   SUB   // فرعي
// }

enum Role {
  ADMIN
  SECURITY_MANAGER
  DEPARTMENT_MANAGER
  USER
}
