generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                           String              @id @default(uuid())
  email                        String              @unique
  password                     String
  name                         String
  role                         Role                @default(USER)
  department                   String?
  nameAr                       String?
  mobile                       String?
  phone                        String?
  createdAt                    DateTime            @default(now())
  updatedAt                    DateTime            @updatedAt
  createdAssessments           Assessment[]        @relation("CreatedByAdmin")
  managedAssessments           Assessment[]        @relation("ManagedBySecurityManager")
  departmentManagerAssessments AssessmentStatus[]  @relation("AssessmentStatusDepartmentManager")
  securityManagerAssessments   AssessmentStatus[]  @relation("AssessmentStatusSecurityManager")
  controlAssignments           ControlAssignment[]
  securityReviews              SecurityReview[]
  assignedTasks                Task[]              @relation("AssignedTasks")
  responsibleTasks             Task[]              @relation("ResponsibleTasks")
}

model Assessment {
  id                     String                @id @default(uuid())
  companyNameAr          String
  companyNameEn          String
  logoPath               String?
  securityManagerId      String
  secondaryContactNameAr String
  secondaryContactNameEn String
  secondaryContactMobile String
  secondaryContactPhone  String
  secondaryContactEmail  String
  assessmentName         String
  createdById            String
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  createdBy              User                  @relation("CreatedByAdmin", fields: [createdById], references: [id])
  securityManager        User                  @relation("ManagedBySecurityManager", fields: [securityManagerId], references: [id])
  assessmentStatuses     AssessmentStatus[]
  sensitiveSystems       SensitiveSystemInfo[]

  @@index([securityManagerId])
  @@index([createdById])
}

model SensitiveSystemInfo {
  id                         String             @id @default(uuid())
  systemName                 String
  systemCategory             String
  systemDescription          String
  assetRouterCount           Int
  assetSwitchCount           Int
  assetGatewayCount          Int
  assetFirewallCount         Int
  assetIPSIDSCount           Int
  assetAPTCount              Int
  assetDatabaseCount         Int
  assetStorageCount          Int
  assetMiddlewareCount       Int
  assetServerOSCount         Int
  assetApplicationCount      Int
  assetEncryptionDeviceCount Int
  assetPeripheralCount       Int
  assetSupportStaffCount     Int
  assetDocumentationCount    Int
  otherAssetType             String?
  otherAssetCount            Int?
  totalAssetCount            Int
  assessmentId               String
  createdAt                  DateTime           @default(now())
  updatedAt                  DateTime           @updatedAt
  assessmentStatuses         AssessmentStatus[]
  assessment                 Assessment         @relation(fields: [assessmentId], references: [id])
  tasks                      Task[]
  securityReviews           SecurityReview[]

  @@index([assessmentId])
}

model Control {
  id                 String              @id @default(uuid())
  mainComponent      String
  subComponent       String?
  controlType        String
  controlNumber      String              @unique
  controlText        String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  controlAssignments ControlAssignment[]
}

model Department {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id                 String              @id @default(uuid())
  deadline           DateTime
  status             TaskStatus          @default(PENDING)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  sensitiveSystemId  String
  assignedById       String
  assignedToId       String?
  controlAssignments ControlAssignment[]
  assignedBy         User                @relation("AssignedTasks", fields: [assignedById], references: [id])
  assignedTo         User?               @relation("ResponsibleTasks", fields: [assignedToId], references: [id])
  sensitiveSystem    SensitiveSystemInfo @relation(fields: [sensitiveSystemId], references: [id])

  @@index([sensitiveSystemId])
  @@index([assignedById])
  @@index([assignedToId])
}

model ControlAssignment {
  id                     String                            @id @default(uuid())
  taskId                 String
  controlId              String
  assignedUserId         String?
  status                 TaskStatus                        @default(PENDING)
  createdAt              DateTime                          @default(now())
  updatedAt              DateTime                          @updatedAt
  notes                  String?
  correctiveActions      String?
  expectedComplianceDate DateTime?
  complianceLevel        ComplianceLevel?
  managerNote            String?
  managerStatus          String?
  assignedUser           User?                             @relation(fields: [assignedUserId], references: [id])
  control                Control                           @relation(fields: [controlId], references: [id])
  task                   Task                              @relation(fields: [taskId], references: [id])
  files                  ControlFile[]
  securityReviews        SecurityReviewControlAssignment[]

  @@index([assignedUserId])
}

model ControlFile {
  id                  String            @id @default(uuid())
  filePath            String
  originalFilename    String
  controlAssignmentId String
  createdAt           DateTime          @default(now())
  controlAssignment   ControlAssignment @relation(fields: [controlAssignmentId], references: [id], onDelete: Cascade)

  @@index([controlAssignmentId])
}

model AssessmentStatus {
  id                      String              @id @default(uuid())
  assessmentId            String
  sensitiveSystemId       String
  securityManagerId       String
  departmentManagerId     String
  securityManagerStatus   ReviewStatus?
  departmentManagerStatus ReviewStatus?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  assessment              Assessment          @relation(fields: [assessmentId], references: [id])
  departmentManager       User                @relation("AssessmentStatusDepartmentManager", fields: [departmentManagerId], references: [id])
  securityManager         User                @relation("AssessmentStatusSecurityManager", fields: [securityManagerId], references: [id])
  sensitiveSystem         SensitiveSystemInfo @relation(fields: [sensitiveSystemId], references: [id])

  @@index([assessmentId])
  @@index([sensitiveSystemId])
  @@index([securityManagerId])
  @@index([departmentManagerId])
}

model SecurityReview {
  id                 String                            @id @default(uuid())
  systemId           String
  mainComponent      String
  securityManagerId  String
  action             SecurityAction
  note               String?
  createdAt          DateTime                          @default(now())
  updatedAt          DateTime                          @updatedAt
  securityManager    User                              @relation(fields: [securityManagerId], references: [id], onDelete: Cascade)
  system             SensitiveSystemInfo               @relation(fields: [systemId], references: [id], onDelete: Cascade)
  controlAssignments SecurityReviewControlAssignment[]

  @@index([systemId])
  @@index([securityManagerId])
}

model SecurityReviewControlAssignment {
  id                  String            @id @default(uuid())
  securityReviewId    String
  controlAssignmentId String
  createdAt           DateTime          @default(now())
  controlAssignment   ControlAssignment @relation(fields: [controlAssignmentId], references: [id], onDelete: Cascade)
  securityReview      SecurityReview    @relation(fields: [securityReviewId], references: [id], onDelete: Cascade)

  @@index([securityReviewId])
  @@index([controlAssignmentId])
}

enum Role {
  ADMIN
  SECURITY_MANAGER
  DEPARTMENT_MANAGER
  USER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  APPROVED
  REJECTED
  OVERDUE
}

enum ComplianceLevel {
  NOT_IMPLEMENTED
  PARTIALLY_IMPLEMENTED
  IMPLEMENTED
  NOT_APPLICABLE
}

enum ReviewStatus {
  REVIEW_REQUESTED @map("طلب مراجعة")
  FINISHED         @map("معتمد")
}

enum SecurityAction {
  CONFIRM
  REQUEST_REVIEW
}
